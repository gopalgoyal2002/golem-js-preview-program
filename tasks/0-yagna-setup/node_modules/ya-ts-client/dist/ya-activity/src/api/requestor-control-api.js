"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Yagna Activity API
 *  The Activity API can be perceived as controls which a Requestor-side application has to steer the execution of an Activity as specified in an Agreement which has been negotiated via the Market API/Protocol. This defines possible interactions between the Requestor application (via Activity API) and the generic components running on the Provider node, which host the Provider-side application code. The possible interactions imply a logical “execution environment” component, which is the host/container for the “payload” code. The “execution environment” is specified as an ExeUnit, with a generic interface via which a Provider node’s Activity Controller can operate the hosted code. It conforms with capability level 1 of the [Activity API specification] (https://docs.google.com/document/d/1BXaN32ediXdBHljEApmznSfbuudTU8TmvOmHKl0gmQM).
 *
 * The version of the OpenAPI document: 1.6.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestorControlApi = exports.RequestorControlApiFactory = exports.RequestorControlApiFp = exports.RequestorControlApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../../common");
// @ts-ignore
const base_1 = require("../../base");
/**
 * RequestorControlApi - axios parameter creator
 * @export
 */
exports.RequestorControlApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Sends encrypted command to secure exe-unit.
         * @param {string} activityId
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callEncrypted: (activityId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'activityId' is not null or undefined
            common_1.assertParamExists('callEncrypted', 'activityId', activityId);
            // verify required parameter 'body' is not null or undefined
            common_1.assertParamExists('callEncrypted', 'body', body);
            const localVarPath = `/activity/{activityId}/encrypted`
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
         * @summary Creates new Activity based on given Agreement.
         * @param {string | CreateActivityRequest} stringCreateActivityRequest
         * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActivity: (stringCreateActivityRequest, timeout, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'stringCreateActivityRequest' is not null or undefined
            common_1.assertParamExists('createActivity', 'stringCreateActivityRequest', stringCreateActivityRequest);
            const localVarPath = `/activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (timeout !== undefined) {
                localVarQueryParameter['timeout'] = timeout;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(stringCreateActivityRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
         * @summary Destroys given Activity.
         * @param {string} activityId
         * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyActivity: (activityId, timeout, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'activityId' is not null or undefined
            common_1.assertParamExists('destroyActivity', 'activityId', activityId);
            const localVarPath = `/activity/{activityId}`
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (timeout !== undefined) {
                localVarQueryParameter['timeout'] = timeout;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * **Note:** This call shall get routed directly to ExeUnit.
         * @summary Executes an ExeScript batch within a given Activity.
         * @param {string} activityId
         * @param {ExeScriptRequest} script
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exec: (activityId, script, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'activityId' is not null or undefined
            common_1.assertParamExists('exec', 'activityId', activityId);
            // verify required parameter 'script' is not null or undefined
            common_1.assertParamExists('exec', 'script', script);
            const localVarPath = `/activity/{activityId}/exec`
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(script, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * \'This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn\'t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: <RuntimeEvent structure>      This streaming endpoint requires dedicated implementation. \'
         * @summary Queries for ExeScript batch results.
         * @param {string} activityId
         * @param {string} batchId
         * @param {number} [commandIndex] Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.
         * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecBatchResults: (activityId, batchId, commandIndex, timeout, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'activityId' is not null or undefined
            common_1.assertParamExists('getExecBatchResults', 'activityId', activityId);
            // verify required parameter 'batchId' is not null or undefined
            common_1.assertParamExists('getExecBatchResults', 'batchId', batchId);
            const localVarPath = `/activity/{activityId}/exec/{batchId}`
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)))
                .replace(`{${"batchId"}}`, encodeURIComponent(String(batchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (commandIndex !== undefined) {
                localVarQueryParameter['commandIndex'] = commandIndex;
            }
            if (timeout !== undefined) {
                localVarQueryParameter['timeout'] = timeout;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RequestorControlApi - functional programming interface
 * @export
 */
exports.RequestorControlApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.RequestorControlApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Sends encrypted command to secure exe-unit.
         * @param {string} activityId
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callEncrypted(activityId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.callEncrypted(activityId, body, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
         * @summary Creates new Activity based on given Agreement.
         * @param {string | CreateActivityRequest} stringCreateActivityRequest
         * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActivity(stringCreateActivityRequest, timeout, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createActivity(stringCreateActivityRequest, timeout, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
         * @summary Destroys given Activity.
         * @param {string} activityId
         * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyActivity(activityId, timeout, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.destroyActivity(activityId, timeout, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * **Note:** This call shall get routed directly to ExeUnit.
         * @summary Executes an ExeScript batch within a given Activity.
         * @param {string} activityId
         * @param {ExeScriptRequest} script
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exec(activityId, script, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.exec(activityId, script, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * \'This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn\'t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: <RuntimeEvent structure>      This streaming endpoint requires dedicated implementation. \'
         * @summary Queries for ExeScript batch results.
         * @param {string} activityId
         * @param {string} batchId
         * @param {number} [commandIndex] Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.
         * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecBatchResults(activityId, batchId, commandIndex, timeout, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getExecBatchResults(activityId, batchId, commandIndex, timeout, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * RequestorControlApi - factory interface
 * @export
 */
exports.RequestorControlApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.RequestorControlApiFp(configuration);
    return {
        /**
         *
         * @summary Sends encrypted command to secure exe-unit.
         * @param {string} activityId
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callEncrypted(activityId, body, options) {
            return localVarFp.callEncrypted(activityId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
         * @summary Creates new Activity based on given Agreement.
         * @param {string | CreateActivityRequest} stringCreateActivityRequest
         * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActivity(stringCreateActivityRequest, timeout, options) {
            return localVarFp.createActivity(stringCreateActivityRequest, timeout, options).then((request) => request(axios, basePath));
        },
        /**
         * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
         * @summary Destroys given Activity.
         * @param {string} activityId
         * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyActivity(activityId, timeout, options) {
            return localVarFp.destroyActivity(activityId, timeout, options).then((request) => request(axios, basePath));
        },
        /**
         * **Note:** This call shall get routed directly to ExeUnit.
         * @summary Executes an ExeScript batch within a given Activity.
         * @param {string} activityId
         * @param {ExeScriptRequest} script
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exec(activityId, script, options) {
            return localVarFp.exec(activityId, script, options).then((request) => request(axios, basePath));
        },
        /**
         * \'This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn\'t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: <RuntimeEvent structure>      This streaming endpoint requires dedicated implementation. \'
         * @summary Queries for ExeScript batch results.
         * @param {string} activityId
         * @param {string} batchId
         * @param {number} [commandIndex] Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.
         * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecBatchResults(activityId, batchId, commandIndex, timeout, options) {
            return localVarFp.getExecBatchResults(activityId, batchId, commandIndex, timeout, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RequestorControlApi - object-oriented interface
 * @export
 * @class RequestorControlApi
 * @extends {BaseAPI}
 */
class RequestorControlApi extends base_1.BaseAPI {
    /**
     *
     * @summary Sends encrypted command to secure exe-unit.
     * @param {string} activityId
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorControlApi
     */
    callEncrypted(activityId, body, options) {
        return exports.RequestorControlApiFp(this.configuration).callEncrypted(activityId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
     * @summary Creates new Activity based on given Agreement.
     * @param {string | CreateActivityRequest} stringCreateActivityRequest
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorControlApi
     */
    createActivity(stringCreateActivityRequest, timeout, options) {
        return exports.RequestorControlApiFp(this.configuration).createActivity(stringCreateActivityRequest, timeout, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
     * @summary Destroys given Activity.
     * @param {string} activityId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorControlApi
     */
    destroyActivity(activityId, timeout, options) {
        return exports.RequestorControlApiFp(this.configuration).destroyActivity(activityId, timeout, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * **Note:** This call shall get routed directly to ExeUnit.
     * @summary Executes an ExeScript batch within a given Activity.
     * @param {string} activityId
     * @param {ExeScriptRequest} script
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorControlApi
     */
    exec(activityId, script, options) {
        return exports.RequestorControlApiFp(this.configuration).exec(activityId, script, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * \'This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):   - application/json - standard JSON response, specified below, as code generators handle it properly.   - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).     This isn\'t explicitly specified as code generators generally are unable to handle this.     The streaming events adhere to following format:        event: runtime       data: <RuntimeEvent structure>      This streaming endpoint requires dedicated implementation. \'
     * @summary Queries for ExeScript batch results.
     * @param {string} activityId
     * @param {string} batchId
     * @param {number} [commandIndex] Wait until command with the specified index finishes. Must be accompanied by a valid \&quot;pollTimeout\&quot; query parameter.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorControlApi
     */
    getExecBatchResults(activityId, batchId, commandIndex, timeout, options) {
        return exports.RequestorControlApiFp(this.configuration).getExecBatchResults(activityId, batchId, commandIndex, timeout, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RequestorControlApi = RequestorControlApi;
