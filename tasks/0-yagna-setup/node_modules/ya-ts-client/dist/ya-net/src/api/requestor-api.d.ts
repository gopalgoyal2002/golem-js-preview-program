/**
 * Yagna Net API
 *  Yagna Net API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
import { RequestArgs, BaseAPI } from '../../base';
import { Address } from '../../src/models';
import { Connection } from '../../src/models';
import { Network } from '../../src/models';
import { Node } from '../../src/models';
/**
 * RequestorApi - axios parameter creator
 * @export
 */
export declare const RequestorApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary AddAddress - Assigns a new IP address to the Requestor in a Network.
     * @param {string} networkId
     * @param {Address} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAddress: (networkId: string, address: Address, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary AddNode - Advertises and adds a new Node to a Network.
     * @param {string} networkId
     * @param {Node} node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNode: (networkId: string, node: Node, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary CreateNetwork - Creates a new Network.
     * @param {Network} network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNetwork: (network: Network, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary GetAddresses - Fetches Requestor\'s IP addresses in a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddresses: (networkId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary GetConnections - Fetches Requestor\'s TCP connections in a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnections: (networkId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary GetNetwork - Fetches a Network created by the Requestor.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetwork: (networkId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary GetNetworks - Fetches Networks created by the Requestor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworks: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary GetNodes - Fetches Nodes added to a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNodes: (networkId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary RemoveNetwork - Removes a Network created by the Requestor.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeNetwork: (networkId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary RemoveNode - Advertises and removes a Node from a Network.
     * @param {string} networkId
     * @param {string} nodeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeNode: (networkId: string, nodeId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RequestorApi - functional programming interface
 * @export
 */
export declare const RequestorApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary AddAddress - Assigns a new IP address to the Requestor in a Network.
     * @param {string} networkId
     * @param {Address} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAddress(networkId: string, address: Address, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary AddNode - Advertises and adds a new Node to a Network.
     * @param {string} networkId
     * @param {Node} node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNode(networkId: string, node: Node, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary CreateNetwork - Creates a new Network.
     * @param {Network} network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNetwork(network: Network, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Network>>;
    /**
     *
     * @summary GetAddresses - Fetches Requestor\'s IP addresses in a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddresses(networkId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Address>>>;
    /**
     *
     * @summary GetConnections - Fetches Requestor\'s TCP connections in a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnections(networkId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Connection>>>;
    /**
     *
     * @summary GetNetwork - Fetches a Network created by the Requestor.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetwork(networkId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Network>>;
    /**
     *
     * @summary GetNetworks - Fetches Networks created by the Requestor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Network>>>;
    /**
     *
     * @summary GetNodes - Fetches Nodes added to a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNodes(networkId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Node>>>;
    /**
     *
     * @summary RemoveNetwork - Removes a Network created by the Requestor.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeNetwork(networkId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary RemoveNode - Advertises and removes a Node from a Network.
     * @param {string} networkId
     * @param {string} nodeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeNode(networkId: string, nodeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * RequestorApi - factory interface
 * @export
 */
export declare const RequestorApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary AddAddress - Assigns a new IP address to the Requestor in a Network.
     * @param {string} networkId
     * @param {Address} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAddress(networkId: string, address: Address, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary AddNode - Advertises and adds a new Node to a Network.
     * @param {string} networkId
     * @param {Node} node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addNode(networkId: string, node: Node, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary CreateNetwork - Creates a new Network.
     * @param {Network} network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createNetwork(network: Network, options?: any): AxiosPromise<Network>;
    /**
     *
     * @summary GetAddresses - Fetches Requestor\'s IP addresses in a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddresses(networkId: string, options?: any): AxiosPromise<Array<Address>>;
    /**
     *
     * @summary GetConnections - Fetches Requestor\'s TCP connections in a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnections(networkId: string, options?: any): AxiosPromise<Array<Connection>>;
    /**
     *
     * @summary GetNetwork - Fetches a Network created by the Requestor.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetwork(networkId: string, options?: any): AxiosPromise<Network>;
    /**
     *
     * @summary GetNetworks - Fetches Networks created by the Requestor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworks(options?: any): AxiosPromise<Array<Network>>;
    /**
     *
     * @summary GetNodes - Fetches Nodes added to a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNodes(networkId: string, options?: any): AxiosPromise<Array<Node>>;
    /**
     *
     * @summary RemoveNetwork - Removes a Network created by the Requestor.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeNetwork(networkId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary RemoveNode - Advertises and removes a Node from a Network.
     * @param {string} networkId
     * @param {string} nodeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeNode(networkId: string, nodeId: string, options?: any): AxiosPromise<void>;
};
/**
 * RequestorApi - interface
 * @export
 * @interface RequestorApi
 */
export interface RequestorApiInterface {
    /**
     *
     * @summary AddAddress - Assigns a new IP address to the Requestor in a Network.
     * @param {string} networkId
     * @param {Address} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    addAddress(networkId: string, address: Address, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary AddNode - Advertises and adds a new Node to a Network.
     * @param {string} networkId
     * @param {Node} node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    addNode(networkId: string, node: Node, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary CreateNetwork - Creates a new Network.
     * @param {Network} network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    createNetwork(network: Network, options?: AxiosRequestConfig): AxiosPromise<Network>;
    /**
     *
     * @summary GetAddresses - Fetches Requestor\'s IP addresses in a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getAddresses(networkId: string, options?: AxiosRequestConfig): AxiosPromise<Array<Address>>;
    /**
     *
     * @summary GetConnections - Fetches Requestor\'s TCP connections in a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getConnections(networkId: string, options?: AxiosRequestConfig): AxiosPromise<Array<Connection>>;
    /**
     *
     * @summary GetNetwork - Fetches a Network created by the Requestor.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getNetwork(networkId: string, options?: AxiosRequestConfig): AxiosPromise<Network>;
    /**
     *
     * @summary GetNetworks - Fetches Networks created by the Requestor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getNetworks(options?: AxiosRequestConfig): AxiosPromise<Array<Network>>;
    /**
     *
     * @summary GetNodes - Fetches Nodes added to a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    getNodes(networkId: string, options?: AxiosRequestConfig): AxiosPromise<Array<Node>>;
    /**
     *
     * @summary RemoveNetwork - Removes a Network created by the Requestor.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    removeNetwork(networkId: string, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary RemoveNode - Advertises and removes a Node from a Network.
     * @param {string} networkId
     * @param {string} nodeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApiInterface
     */
    removeNode(networkId: string, nodeId: string, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * RequestorApi - object-oriented interface
 * @export
 * @class RequestorApi
 * @extends {BaseAPI}
 */
export declare class RequestorApi extends BaseAPI implements RequestorApiInterface {
    /**
     *
     * @summary AddAddress - Assigns a new IP address to the Requestor in a Network.
     * @param {string} networkId
     * @param {Address} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    addAddress(networkId: string, address: Address, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary AddNode - Advertises and adds a new Node to a Network.
     * @param {string} networkId
     * @param {Node} node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    addNode(networkId: string, node: Node, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary CreateNetwork - Creates a new Network.
     * @param {Network} network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    createNetwork(network: Network, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Network>>;
    /**
     *
     * @summary GetAddresses - Fetches Requestor\'s IP addresses in a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getAddresses(networkId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Address[]>>;
    /**
     *
     * @summary GetConnections - Fetches Requestor\'s TCP connections in a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getConnections(networkId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Connection[]>>;
    /**
     *
     * @summary GetNetwork - Fetches a Network created by the Requestor.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getNetwork(networkId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Network>>;
    /**
     *
     * @summary GetNetworks - Fetches Networks created by the Requestor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getNetworks(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Network[]>>;
    /**
     *
     * @summary GetNodes - Fetches Nodes added to a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getNodes(networkId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Node[]>>;
    /**
     *
     * @summary RemoveNetwork - Removes a Network created by the Requestor.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    removeNetwork(networkId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary RemoveNode - Advertises and removes a Node from a Network.
     * @param {string} networkId
     * @param {string} nodeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    removeNode(networkId: string, nodeId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
}
