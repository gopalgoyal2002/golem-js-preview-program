"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Yagna Net API
 *  Yagna Net API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestorApi = exports.RequestorApiFactory = exports.RequestorApiFp = exports.RequestorApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../../common");
// @ts-ignore
const base_1 = require("../../base");
/**
 * RequestorApi - axios parameter creator
 * @export
 */
exports.RequestorApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary AddAddress - Assigns a new IP address to the Requestor in a Network.
         * @param {string} networkId
         * @param {Address} address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddress: (networkId, address, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'networkId' is not null or undefined
            common_1.assertParamExists('addAddress', 'networkId', networkId);
            // verify required parameter 'address' is not null or undefined
            common_1.assertParamExists('addAddress', 'address', address);
            const localVarPath = `/net/{networkId}/addresses`
                .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(address, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary AddNode - Advertises and adds a new Node to a Network.
         * @param {string} networkId
         * @param {Node} node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNode: (networkId, node, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'networkId' is not null or undefined
            common_1.assertParamExists('addNode', 'networkId', networkId);
            // verify required parameter 'node' is not null or undefined
            common_1.assertParamExists('addNode', 'node', node);
            const localVarPath = `/net/{networkId}/nodes`
                .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(node, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary CreateNetwork - Creates a new Network.
         * @param {Network} network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNetwork: (network, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'network' is not null or undefined
            common_1.assertParamExists('createNetwork', 'network', network);
            const localVarPath = `/net`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(network, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary GetAddresses - Fetches Requestor\'s IP addresses in a Network.
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddresses: (networkId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'networkId' is not null or undefined
            common_1.assertParamExists('getAddresses', 'networkId', networkId);
            const localVarPath = `/net/{networkId}/addresses`
                .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary GetConnections - Fetches Requestor\'s TCP connections in a Network.
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnections: (networkId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'networkId' is not null or undefined
            common_1.assertParamExists('getConnections', 'networkId', networkId);
            const localVarPath = `/net/{networkId}/tcp`
                .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary GetNetwork - Fetches a Network created by the Requestor.
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetwork: (networkId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'networkId' is not null or undefined
            common_1.assertParamExists('getNetwork', 'networkId', networkId);
            const localVarPath = `/net/{networkId}`
                .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary GetNetworks - Fetches Networks created by the Requestor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworks: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/net`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary GetNodes - Fetches Nodes added to a Network.
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodes: (networkId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'networkId' is not null or undefined
            common_1.assertParamExists('getNodes', 'networkId', networkId);
            const localVarPath = `/net/{networkId}/nodes`
                .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary RemoveNetwork - Removes a Network created by the Requestor.
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeNetwork: (networkId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'networkId' is not null or undefined
            common_1.assertParamExists('removeNetwork', 'networkId', networkId);
            const localVarPath = `/net/{networkId}`
                .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary RemoveNode - Advertises and removes a Node from a Network.
         * @param {string} networkId
         * @param {string} nodeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeNode: (networkId, nodeId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'networkId' is not null or undefined
            common_1.assertParamExists('removeNode', 'networkId', networkId);
            // verify required parameter 'nodeId' is not null or undefined
            common_1.assertParamExists('removeNode', 'nodeId', nodeId);
            const localVarPath = `/net/{networkId}/nodes/{nodeId}`
                .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)))
                .replace(`{${"nodeId"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RequestorApi - functional programming interface
 * @export
 */
exports.RequestorApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.RequestorApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary AddAddress - Assigns a new IP address to the Requestor in a Network.
         * @param {string} networkId
         * @param {Address} address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddress(networkId, address, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addAddress(networkId, address, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary AddNode - Advertises and adds a new Node to a Network.
         * @param {string} networkId
         * @param {Node} node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNode(networkId, node, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addNode(networkId, node, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary CreateNetwork - Creates a new Network.
         * @param {Network} network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNetwork(network, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createNetwork(network, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary GetAddresses - Fetches Requestor\'s IP addresses in a Network.
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddresses(networkId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAddresses(networkId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary GetConnections - Fetches Requestor\'s TCP connections in a Network.
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnections(networkId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConnections(networkId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary GetNetwork - Fetches a Network created by the Requestor.
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetwork(networkId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getNetwork(networkId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary GetNetworks - Fetches Networks created by the Requestor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworks(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getNetworks(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary GetNodes - Fetches Nodes added to a Network.
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodes(networkId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getNodes(networkId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary RemoveNetwork - Removes a Network created by the Requestor.
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeNetwork(networkId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeNetwork(networkId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary RemoveNode - Advertises and removes a Node from a Network.
         * @param {string} networkId
         * @param {string} nodeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeNode(networkId, nodeId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeNode(networkId, nodeId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * RequestorApi - factory interface
 * @export
 */
exports.RequestorApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.RequestorApiFp(configuration);
    return {
        /**
         *
         * @summary AddAddress - Assigns a new IP address to the Requestor in a Network.
         * @param {string} networkId
         * @param {Address} address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAddress(networkId, address, options) {
            return localVarFp.addAddress(networkId, address, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary AddNode - Advertises and adds a new Node to a Network.
         * @param {string} networkId
         * @param {Node} node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNode(networkId, node, options) {
            return localVarFp.addNode(networkId, node, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary CreateNetwork - Creates a new Network.
         * @param {Network} network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNetwork(network, options) {
            return localVarFp.createNetwork(network, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetAddresses - Fetches Requestor\'s IP addresses in a Network.
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddresses(networkId, options) {
            return localVarFp.getAddresses(networkId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetConnections - Fetches Requestor\'s TCP connections in a Network.
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnections(networkId, options) {
            return localVarFp.getConnections(networkId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetNetwork - Fetches a Network created by the Requestor.
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetwork(networkId, options) {
            return localVarFp.getNetwork(networkId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetNetworks - Fetches Networks created by the Requestor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworks(options) {
            return localVarFp.getNetworks(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetNodes - Fetches Nodes added to a Network.
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodes(networkId, options) {
            return localVarFp.getNodes(networkId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary RemoveNetwork - Removes a Network created by the Requestor.
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeNetwork(networkId, options) {
            return localVarFp.removeNetwork(networkId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary RemoveNode - Advertises and removes a Node from a Network.
         * @param {string} networkId
         * @param {string} nodeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeNode(networkId, nodeId, options) {
            return localVarFp.removeNode(networkId, nodeId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RequestorApi - object-oriented interface
 * @export
 * @class RequestorApi
 * @extends {BaseAPI}
 */
class RequestorApi extends base_1.BaseAPI {
    /**
     *
     * @summary AddAddress - Assigns a new IP address to the Requestor in a Network.
     * @param {string} networkId
     * @param {Address} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    addAddress(networkId, address, options) {
        return exports.RequestorApiFp(this.configuration).addAddress(networkId, address, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary AddNode - Advertises and adds a new Node to a Network.
     * @param {string} networkId
     * @param {Node} node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    addNode(networkId, node, options) {
        return exports.RequestorApiFp(this.configuration).addNode(networkId, node, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary CreateNetwork - Creates a new Network.
     * @param {Network} network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    createNetwork(network, options) {
        return exports.RequestorApiFp(this.configuration).createNetwork(network, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetAddresses - Fetches Requestor\'s IP addresses in a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getAddresses(networkId, options) {
        return exports.RequestorApiFp(this.configuration).getAddresses(networkId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetConnections - Fetches Requestor\'s TCP connections in a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getConnections(networkId, options) {
        return exports.RequestorApiFp(this.configuration).getConnections(networkId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetNetwork - Fetches a Network created by the Requestor.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getNetwork(networkId, options) {
        return exports.RequestorApiFp(this.configuration).getNetwork(networkId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetNetworks - Fetches Networks created by the Requestor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getNetworks(options) {
        return exports.RequestorApiFp(this.configuration).getNetworks(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetNodes - Fetches Nodes added to a Network.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getNodes(networkId, options) {
        return exports.RequestorApiFp(this.configuration).getNodes(networkId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary RemoveNetwork - Removes a Network created by the Requestor.
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    removeNetwork(networkId, options) {
        return exports.RequestorApiFp(this.configuration).removeNetwork(networkId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary RemoveNode - Advertises and removes a Node from a Network.
     * @param {string} networkId
     * @param {string} nodeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    removeNode(networkId, nodeId, options) {
        return exports.RequestorApiFp(this.configuration).removeNode(networkId, nodeId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RequestorApi = RequestorApi;
