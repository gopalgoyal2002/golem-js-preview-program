export class Command {
    commandName;
    args;
    constructor(commandName, args) {
        this.commandName = commandName;
        this.args = args || {};
    }
    toJson() {
        return {
            [this.commandName]: this.args,
        };
    }
    toExeScriptRequest() {
        return { text: JSON.stringify([this.toJson()]) };
    }
    async before() {
    }
    async after() {
    }
}
export class Deploy extends Command {
    constructor(args) {
        super("deploy", args);
    }
}
export class Start extends Command {
    constructor(args) {
        super("start", args);
    }
}
export class Run extends Command {
    constructor(cmd, args, env, capture) {
        const captureOpt = capture || {
            stdout: { atEnd: { format: "string" } },
            stderr: { atEnd: { format: "string" } },
        };
        super("run", {
            entry_point: cmd,
            args,
            env,
            capture: captureOpt,
        });
    }
}
export class Terminate extends Command {
    constructor(args) {
        super("terminate", args);
    }
}
export class Transfer extends Command {
    from;
    to;
    constructor(from, to, args) {
        super("transfer", { from, to, args });
        this.from = from;
        this.to = to;
    }
}
export class UploadFile extends Transfer {
    storageProvider;
    src;
    dstPath;
    constructor(storageProvider, src, dstPath) {
        super();
        this.storageProvider = storageProvider;
        this.src = src;
        this.dstPath = dstPath;
        this.args["to"] = `container:${dstPath}`;
    }
    async before() {
        this.args["from"] = await this.storageProvider.publish(this.src);
    }
    async after() {
        await this.storageProvider.release([this.args["from"]]);
    }
}
export class DownloadFile extends Transfer {
    storageProvider;
    srcPath;
    dstPath;
    constructor(storageProvider, srcPath, dstPath) {
        super();
        this.storageProvider = storageProvider;
        this.srcPath = srcPath;
        this.dstPath = dstPath;
        this.args = { from: `container:${srcPath}` };
    }
    async before() {
        this.args["to"] = await this.storageProvider.receive(this.dstPath);
    }
}
//# sourceMappingURL=command.js.map