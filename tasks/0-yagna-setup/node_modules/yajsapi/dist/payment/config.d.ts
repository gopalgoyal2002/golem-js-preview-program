import { AllocationOptions } from "./allocation.js";
import { RequestorApi } from "ya-ts-client/dist/ya-payment/api.js";
import { Logger } from "../utils/index.js";
import { YagnaOptions } from "../executor/index.js";
import { PaymentOptions } from "./service.js";
import { InvoiceOptions } from "./invoice.js";
import { AccountsOptions } from "./accounts.js";
export interface BasePaymentOptions {
    yagnaOptions?: YagnaOptions;
    budget?: number;
    payment?: {
        driver?: string;
        network?: string;
    };
    paymentTimeout?: number;
    paymentRequestTimeout?: number;
    logger?: Logger;
    eventTarget?: EventTarget;
}
declare abstract class BaseConfig {
    readonly options?: BasePaymentOptions | undefined;
    readonly yagnaOptions?: YagnaOptions;
    readonly paymentTimeout: number;
    readonly api: RequestorApi;
    readonly logger?: Logger;
    readonly eventTarget?: EventTarget;
    readonly payment: {
        driver: string;
        network: string;
    };
    readonly paymentRequestTimeout: number;
    protected constructor(options?: BasePaymentOptions | undefined);
}
export declare class PaymentConfig extends BaseConfig {
    readonly invoiceFetchingInterval: number;
    readonly debitNotesFetchingInterval: number;
    readonly payingInterval: number;
    readonly maxInvoiceEvents: number;
    readonly maxDebitNotesEvents: number;
    constructor(options?: PaymentOptions);
}
export declare class AllocationConfig extends BaseConfig {
    readonly budget: number;
    readonly payment: {
        driver: string;
        network: string;
    };
    readonly expires: number;
    readonly account: {
        address: string;
        platform: string;
    };
    constructor(options?: AllocationOptions);
}
export declare class InvoiceConfig extends BaseConfig {
    constructor(options?: InvoiceOptions);
}
export declare class AccountConfig extends BaseConfig {
    constructor(options?: AccountsOptions);
}
export {};
