import { InvoiceConfig } from "./config.js";
import { Events } from "../events/index.js";
export class BaseNote {
    options;
    providerId;
    recipientId;
    payeeAddr;
    payerAddr;
    paymentPlatform;
    agreementId;
    paymentDueDate;
    status;
    constructor(model, options) {
        this.options = options;
        this.providerId = model.issuerId;
        this.recipientId = model.recipientId;
        this.payeeAddr = model.payeeAddr;
        this.payerAddr = model.payerAddr;
        this.paymentPlatform = model.paymentPlatform;
        this.agreementId = model.agreementId;
        this.paymentDueDate = model.paymentDueDate;
        this.status = model.status;
    }
    async getStatus() {
        await this.refreshStatus();
        return this.status;
    }
}
export class Invoice extends BaseNote {
    options;
    id;
    activityIds;
    amount;
    timestamp;
    recipientId;
    static async create(invoiceId, options) {
        const config = new InvoiceConfig(options);
        const { data: model } = await config.api.getInvoice(invoiceId);
        return new Invoice(model, config);
    }
    constructor(model, options) {
        super(model, options);
        this.options = options;
        this.id = model.invoiceId;
        this.activityIds = model.activityIds;
        this.amount = model.amount;
        this.timestamp = model.timestamp;
        this.recipientId = model.recipientId;
    }
    async getStatus() {
        await this.refreshStatus();
        return this.status;
    }
    async accept(totalAmountAccepted, allocationId) {
        try {
            await this.options.api.acceptInvoice(this.id, { totalAmountAccepted, allocationId });
        }
        catch (e) {
            const reason = e?.response?.data?.message || e;
            this.options.eventTarget?.dispatchEvent(new Events.PaymentFailed({ id: this.id, agreementId: this.agreementId, reason }));
            throw new Error(`Unable to accept invoice ${this.id} ${reason}`);
        }
        this.options.eventTarget?.dispatchEvent(new Events.PaymentAccepted(this));
    }
    async reject(rejection) {
        try {
            await this.options.api.rejectInvoice(this.id, rejection);
        }
        catch (e) {
            throw new Error(`Unable to reject invoice ${this.id} ${e?.response?.data?.message || e}`);
        }
        finally {
            this.options.eventTarget?.dispatchEvent(new Events.PaymentFailed({ id: this.id, agreementId: this.agreementId, reason: rejection.message }));
        }
    }
    async refreshStatus() {
        const { data: model } = await this.options.api.getInvoice(this.id);
        this.status = model.status;
    }
}
//# sourceMappingURL=invoice.js.map