import { BasePaymentOptions, InvoiceConfig } from "./config.js";
import { Invoice as Model, InvoiceStatus } from "ya-ts-client/dist/ya-payment/src/models/index.js";
import { Rejection } from "./rejection.js";
export type InvoiceOptions = BasePaymentOptions;
export interface BaseModel {
    issuerId: string;
    recipientId: string;
    payeeAddr: string;
    payerAddr: string;
    paymentPlatform: string;
    agreementId: string;
    paymentDueDate?: string;
    status: InvoiceStatus;
}
export declare abstract class BaseNote<ModelType extends BaseModel> {
    protected options: InvoiceConfig;
    abstract readonly id: string;
    readonly providerId: string;
    readonly recipientId: string;
    readonly payeeAddr: string;
    readonly payerAddr: string;
    readonly paymentPlatform: string;
    readonly agreementId: string;
    readonly paymentDueDate?: string;
    protected status: InvoiceStatus;
    protected constructor(model: ModelType, options: InvoiceConfig);
    protected getStatus(): Promise<InvoiceStatus>;
    protected abstract accept(totalAmountAccepted: string, allocationId: string): Promise<void>;
    protected abstract reject(rejection: Rejection): Promise<void>;
    protected abstract refreshStatus(): Promise<void>;
}
export declare class Invoice extends BaseNote<Model> {
    protected options: InvoiceConfig;
    readonly id: string;
    readonly activityIds?: string[];
    readonly amount: string;
    readonly timestamp: string;
    readonly recipientId: string;
    static create(invoiceId: string, options?: InvoiceOptions): Promise<Invoice>;
    protected constructor(model: Model, options: InvoiceConfig);
    getStatus(): Promise<InvoiceStatus>;
    accept(totalAmountAccepted: string, allocationId: string): Promise<void>;
    reject(rejection: Rejection): Promise<void>;
    protected refreshStatus(): Promise<void>;
}
