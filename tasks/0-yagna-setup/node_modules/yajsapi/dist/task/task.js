export var TaskState;
(function (TaskState) {
    TaskState[TaskState["New"] = 0] = "New";
    TaskState[TaskState["Retry"] = 1] = "Retry";
    TaskState[TaskState["Pending"] = 2] = "Pending";
    TaskState[TaskState["Done"] = 3] = "Done";
    TaskState[TaskState["Rejected"] = 4] = "Rejected";
})(TaskState || (TaskState = {}));
const MAX_RETRIES = 5;
export class Task {
    id;
    worker;
    data;
    initWorker;
    state = TaskState.New;
    results;
    error;
    retriesCount = 0;
    constructor(id, worker, data, initWorker) {
        this.id = id;
        this.worker = worker;
        this.data = data;
        this.initWorker = initWorker;
    }
    start() {
        this.state = TaskState.Pending;
    }
    stop(results, error, retry = true) {
        if (error) {
            ++this.retriesCount;
            this.state = retry && this.retriesCount <= MAX_RETRIES ? TaskState.Retry : TaskState.Rejected;
            this.error = error;
        }
        else {
            this.state = TaskState.Done;
            this.results = results;
        }
    }
    isQueueable() {
        return this.state === TaskState.New || this.state === TaskState.Retry;
    }
    isRetry() {
        return this.state === TaskState.Retry;
    }
    isFinished() {
        return this.state === TaskState.Done || this.state === TaskState.Rejected;
    }
    isRejected() {
        return this.state === TaskState.Rejected;
    }
    isPending() {
        return this.state === TaskState.Pending;
    }
    isNew() {
        return this.state === TaskState.New;
    }
    getResults() {
        return this.results;
    }
    getData() {
        return this.data;
    }
    getWorker() {
        return this.worker;
    }
    getInitWorker() {
        return this.initWorker;
    }
    getRetriesCount() {
        return this.retriesCount;
    }
    getError() {
        return this.error;
    }
}
//# sourceMappingURL=task.js.map