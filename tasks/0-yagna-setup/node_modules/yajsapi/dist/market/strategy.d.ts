import { Proposal } from "./index.js";
import { MarketDecoration } from "ya-ts-client/dist/ya-payment/src/models/index.js";
import { Logger } from "../utils/index.js";
export declare const SCORE_NEUTRAL = 0;
export declare const SCORE_REJECTED = -1;
export declare const SCORE_TRUSTED = 100;
declare enum Counter {
    TIME = "golem.usage.duration_sec",
    CPU = "golem.usage.cpu_sec",
    STORAGE = "golem.usage.storage_gib",
    MAXMEM = "golem.usage.gib",
    UNKNOWN = ""
}
export interface ComputationHistory {
    isProviderLastAgreementRejected: (providerId: string) => boolean;
}
export interface MarketStrategy {
    getDemandDecoration(): MarketDecoration;
    scoreProposal(proposal: Proposal): number;
}
export declare class DefaultMarketStrategy implements MarketStrategy {
    private defaultStrategy;
    constructor(computationHistory: ComputationHistory, logger?: Logger);
    getDemandDecoration(): MarketDecoration;
    scoreProposal(proposal: Proposal): number;
}
export declare class LeastExpensiveLinearPayuMarketStrategy implements MarketStrategy {
    private expectedTimeSecs;
    private maxFixedPrice?;
    private maxPriceFor?;
    private logger?;
    constructor(expectedTimeSecs?: number, maxFixedPrice?: number | undefined, maxPriceFor?: Map<Counter, number> | undefined, logger?: Logger | undefined);
    getDemandDecoration(): MarketDecoration;
    scoreProposal(proposal: Proposal): number;
}
export declare class DecreaseScoreForUnconfirmedAgreementMarketStrategy implements MarketStrategy {
    private baseStrategy;
    private factor;
    private computationHistory;
    private logger?;
    constructor(baseStrategy: MarketStrategy, factor: number, computationHistory: ComputationHistory, logger?: Logger | undefined);
    getDemandDecoration(): MarketDecoration;
    scoreProposal(proposal: Proposal): number;
}
export {};
