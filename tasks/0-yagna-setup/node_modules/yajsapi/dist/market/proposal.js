import { ProposalAllOfStateEnum } from "ya-ts-client/dist/ya-market/src/models/index.js";
import { Events } from "../events/index.js";
export class Proposal {
    subscriptionId;
    api;
    demandRequest;
    eventTarget;
    id;
    issuerId;
    properties;
    constraints;
    timestamp;
    state;
    prevProposalId;
    _score = null;
    constructor(subscriptionId, api, model, demandRequest, eventTarget) {
        this.subscriptionId = subscriptionId;
        this.api = api;
        this.demandRequest = demandRequest;
        this.eventTarget = eventTarget;
        this.id = model.proposalId;
        this.issuerId = model.issuerId;
        this.properties = model.properties;
        this.constraints = model.constraints;
        this.state = model.state;
        this.prevProposalId = model.prevProposalId;
        this.timestamp = model.timestamp;
    }
    set score(score) {
        this._score = score;
    }
    get score() {
        return this._score;
    }
    isInitial() {
        return this.state === ProposalAllOfStateEnum.Initial;
    }
    isDraft() {
        return this.state === ProposalAllOfStateEnum.Draft;
    }
    isExpired() {
        return this.state === ProposalAllOfStateEnum.Expired;
    }
    isRejected() {
        return this.state === ProposalAllOfStateEnum.Rejected;
    }
    async reject(reason = "no reason") {
        await this.api.rejectProposalOffer(this.subscriptionId, this.id, { message: reason }).catch((e) => {
            throw new Error(e?.response?.data?.message || e);
        });
        this.eventTarget?.dispatchEvent(new Events.ProposalRejected({ id: this.id, providerId: this.issuerId }));
    }
    async respond(chosenPlatform) {
        this.demandRequest.properties["golem.com.payment.chosen-platform"] = chosenPlatform;
        await this.api
            .counterProposalDemand(this.subscriptionId, this.id, this.demandRequest, { timeout: 20000 })
            .catch((e) => {
            throw new Error(e?.response?.data?.message || e);
        });
        this.eventTarget?.dispatchEvent(new Events.ProposalResponded({ id: this.id, providerId: this.issuerId }));
    }
}
//# sourceMappingURL=proposal.js.map