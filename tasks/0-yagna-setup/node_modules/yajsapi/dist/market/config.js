import { RequestorApi } from "ya-ts-client/dist/ya-market/api.js";
import { Configuration } from "ya-ts-client/dist/ya-market/index.js";
const DEFAULTS = {
    basePath: "http://127.0.0.1:7465",
    subnetTag: "public",
    marketTimeout: 1000 * 60 * 3,
    maxOfferEvents: 10,
    offerFetchingInterval: 10000,
    marketOfferExpiration: 1000 * 60 * 15,
    debitNotesAcceptanceTimeout: 30,
};
export class DemandConfig {
    api;
    yagnaOptions;
    timeout;
    expiration;
    subnetTag;
    maxOfferEvents;
    offerFetchingInterval;
    proposalTimeout;
    logger;
    eventTarget;
    constructor(options) {
        const apiKey = options?.yagnaOptions?.apiKey || process.env.YAGNA_APPKEY;
        if (!apiKey)
            throw new Error("Api key not defined");
        const basePath = options?.yagnaOptions?.basePath || process.env.YAGNA_API_URL || DEFAULTS.basePath;
        const apiConfig = new Configuration({ apiKey, basePath: `${basePath}/market-api/v1`, accessToken: apiKey });
        this.yagnaOptions = options?.yagnaOptions;
        this.api = new RequestorApi(apiConfig);
        this.subnetTag = options?.subnetTag || process.env.YAGNA_SUBNET || DEFAULTS.subnetTag;
        this.timeout = options?.marketTimeout || DEFAULTS.marketTimeout;
        this.expiration = options?.marketOfferExpiration || DEFAULTS.marketOfferExpiration;
        this.offerFetchingInterval = options?.offerFetchingInterval || DEFAULTS.offerFetchingInterval;
        this.logger = options?.logger;
        this.maxOfferEvents = options?.maxOfferEvents || DEFAULTS.maxOfferEvents;
        this.eventTarget = options?.eventTarget;
    }
}
export class MarketConfig extends DemandConfig {
    debitNotesAcceptanceTimeout;
    constructor(options) {
        super(options);
        this.debitNotesAcceptanceTimeout = options?.debitNotesAcceptanceTimeout || DEFAULTS.debitNotesAcceptanceTimeout;
    }
}
//# sourceMappingURL=config.js.map