import { Package } from "../package/index.js";
import { Allocation } from "../payment/index.js";
import { YagnaOptions } from "../executor/index.js";
import { Proposal } from "./proposal.js";
import { Logger } from "../utils/index.js";
import { DemandConfig } from "./config.js";
import { DemandOfferBase } from "ya-ts-client/dist/ya-market/index.js";
export interface DemandOptions {
    subnetTag?: string;
    yagnaOptions?: YagnaOptions;
    marketTimeout?: number;
    marketOfferExpiration?: number;
    logger?: Logger;
    maxOfferEvents?: number;
    offerFetchingInterval?: number;
    proposalTimeout?: number;
    eventTarget?: EventTarget;
}
export declare const DemandEventType = "ProposalReceived";
export declare class Demand extends EventTarget {
    readonly id: any;
    private demandRequest;
    private options;
    private isRunning;
    private logger?;
    static create(taskPackage: Package, allocations: Allocation[], options?: DemandOptions): Promise<Demand>;
    constructor(id: any, demandRequest: DemandOfferBase, options: DemandConfig);
    unsubscribe(): Promise<void>;
    private subscribe;
}
export declare class DemandEvent extends Event {
    readonly proposal: Proposal;
    constructor(type: any, data: any);
}
