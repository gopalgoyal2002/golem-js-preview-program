import { ComparisonOperator, DecorationsBuilder } from "../market/builder.js";
import { RepoResolver } from "./repo_resolver.js";
import axios from "axios";
import { PackageConfig } from "./config.js";
export class Package {
    options;
    logger;
    constructor(options) {
        this.options = options;
        this.logger = options.logger;
    }
    static create(options) {
        const config = new PackageConfig(options);
        return new Package(config);
    }
    async getDemandDecoration() {
        const taskPackage = await this.resolveTaskPackageUrl();
        const builder = new DecorationsBuilder();
        builder
            .addProperty("golem.srv.comp.task_package", taskPackage)
            .addProperty("golem.srv.comp.vm.package_format", this.options.packageFormat)
            .addConstraint("golem.inf.mem.gib", this.options.minMemGib.toString(), ComparisonOperator.GtEq)
            .addConstraint("golem.inf.storage.gib", this.options.minStorageGib.toString(), ComparisonOperator.GtEq)
            .addConstraint("golem.runtime.name", this.options.engine)
            .addConstraint("golem.inf.cpu.threads", this.options.minCpuThreads.toString(), ComparisonOperator.GtEq);
        if (this.options.capabilities.length)
            builder.addConstraint("golem.runtime.capabilities", this.options.capabilities.join(","));
        return builder.getDecorations();
    }
    async getRepoUrl() {
        if (this.options.repoUrl) {
            return this.options.repoUrl;
        }
        const repoResolver = RepoResolver.create({ logger: this.logger });
        return await repoResolver.getRepoUrl();
    }
    async resolveTaskPackageUrl() {
        const repoUrl = await this.getRepoUrl();
        const response = await axios.get(`${repoUrl}/image.${this.options.imageHash}.link`);
        if (response.status != 200) {
            this.logger?.error(`Unable to resolve task package url: Response ` + response.status);
            throw Error(`Error: ${response.status}`);
        }
        const imageUrl = await response.data;
        return `hash:sha3:${this.options.imageHash}:${imageUrl}`;
    }
}
//# sourceMappingURL=package.js.map