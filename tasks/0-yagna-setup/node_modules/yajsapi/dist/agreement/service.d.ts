import { Agreement, AgreementOptions } from "./agreement.js";
import { ComputationHistory } from "../market/strategy.js";
export interface AgreementServiceOptions extends AgreementOptions {
    agreementEventPoolingInterval?: number;
    agreementEventPoolingMaxEventsPerRequest?: number;
    agreementWaitingForProposalTimout?: number;
}
export interface AgreementProposal {
    proposalId: string;
}
export declare class AgreementPoolService implements ComputationHistory {
    private readonly agreementServiceOptions?;
    private logger?;
    private config;
    private proposals;
    private agreements;
    private agreementIdsToReuse;
    private isServiceRunning;
    private lastAgreementRejectedByProvider;
    private initialTime;
    constructor(agreementServiceOptions?: AgreementServiceOptions | undefined);
    run(): Promise<void>;
    addProposal(proposalId: string): void;
    getAgreement(): Promise<Agreement>;
    releaseAgreement(agreementId: string, allowReuse?: boolean): Promise<void>;
    end(): Promise<void>;
    isProviderLastAgreementRejected(providerId: string): boolean;
    terminateAll(reason?: {
        [key: string]: string;
    }): Promise<void>;
    private getAvailableAgreement;
    private createAgreement;
    private getAvailableProposal;
    private waitForAgreementApproval;
}
