"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Yagna Market API
 *  ## Yagna Market The Yagna Market is a core component of the Yagna Network, which enables computational Offers and Demands circulation. The Market is open for all entities willing to buy computations (Demands) or monetize computational resources (Offers). ## Yagna Market API The Yagna Market API is the entry to the Yagna Market through which Requestors and Providers can publish their Demands and Offers respectively, find matching counterparty, conduct negotiations and make an agreement.  This version of Market API conforms with capability level 1 of the <a href=\"https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg\"> Market API specification</a>.  Market API contains two roles: Requestors and Providers which are symmetrical most of the time (excluding agreement phase).
 *
 * The version of the OpenAPI document: 1.6.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestorApi = exports.RequestorApiFactory = exports.RequestorApiFp = exports.RequestorApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../../common");
// @ts-ignore
const base_1 = require("../../base");
/**
 * RequestorApi - axios parameter creator
 * @export
 */
exports.RequestorApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * It is only possible before Provider approved or rejected the Agreement, and before its Expiration.  Causes:   - the awaiting `approveAgreement` on Provider side to return with `Cancelled` response.   - the awaiting `waitForApproval` local call to return with `Cancelled` response.
         * @summary CancelAgreement - Cancels Agreement.
         * @param {string} agreementId
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAgreement: (agreementId, requestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'agreementId' is not null or undefined
            common_1.assertParamExists('cancelAgreement', 'agreementId', agreementId);
            const localVarPath = `/agreements/{agreementId}/cancel`
                .replace(`{${"agreementId"}}`, encodeURIComponent(String(agreementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This is a blocking operation. It will not return until there is at least one new event. All events are appearing on both sides equally.  Returns Agreement related events: * `AgreementApprovedEvent` - Indicates that the Agreement has been approved   by the Provider.   - The Provider is now ready to accept a request to start an Activity     as described in the negotiated agreement.   - The Providers’s corresponding `approveAgreement` call returns `Approved`     after this event is emitted.  * `AgreementRejectedEvent` - Indicates that the Provider has called   `rejectAgreement`, which effectively stops the Agreement handshake.   The Requestor may attempt to return to the Negotiation phase by sending   a new Proposal.  * `AgreementCancelledEvent` - Indicates that the Requestor has called   `cancelAgreement`, which effectively stops the Agreement handshake.  * `AgreementTerminatedEvent` - Indicates that the Agreement has been   terminated by specified party (contains signature).
         * @summary CollectAgreementEvents - Collects events related to an Agreement.
         * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
         * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
         * @param {number} [maxEvents] Maximum number of events that server should return at once.
         * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectAgreementEvents: (timeout, afterTimestamp, maxEvents, appSessionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/agreementEvents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (timeout !== undefined) {
                localVarQueryParameter['timeout'] = timeout;
            }
            if (afterTimestamp !== undefined) {
                localVarQueryParameter['afterTimestamp'] = (afterTimestamp instanceof Date) ?
                    afterTimestamp.toISOString() :
                    afterTimestamp;
            }
            if (maxEvents !== undefined) {
                localVarQueryParameter['maxEvents'] = maxEvents;
            }
            if (appSessionId !== undefined) {
                localVarQueryParameter['appSessionId'] = appSessionId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This is a blocking operation. It will not return until there is at least one new event. Returns Proposal related events: * `ProposalEvent` - Indicates that there is new Offer Proposal for this Demand. * `ProposalRejectedEvent` - Indicates that the Provider has rejected   our previous Proposal related to this Demand. This effectively ends a   Negotiation chain - it explicitly indicates that the sender will not   create another counter-Proposal.  * `PropertyQueryEvent` - not supported yet.  **Note**: When `collectOffers` is waiting, simultaneous call to `unsubscribeDemand` on the same `subscriptionId` should result in \"Subscription does not exist\" error returned from `collectOffers`.  **Note**: Specification requires this endpoint to support list of specific Proposal Ids to listen for messages related only to specific Proposals. This is not covered yet.
         * @summary CollectOffers - Reads Market responses to published Demand.
         * @param {string} subscriptionId
         * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
         * @param {number} [maxEvents] Maximum number of events that server should return at once.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectOffers: (subscriptionId, timeout, maxEvents, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'subscriptionId' is not null or undefined
            common_1.assertParamExists('collectOffers', 'subscriptionId', subscriptionId);
            const localVarPath = `/demands/{subscriptionId}/events`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (timeout !== undefined) {
                localVarQueryParameter['timeout'] = timeout;
            }
            if (maxEvents !== undefined) {
                localVarQueryParameter['maxEvents'] = maxEvents;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Signs self-created Agreement and sends it to the Provider.  This call should immediately follow `createAgreement`.
         * @summary ConfirmAgreement - Sends Agreement proposal to the Provider.
         * @param {string} agreementId
         * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmAgreement: (agreementId, appSessionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'agreementId' is not null or undefined
            common_1.assertParamExists('confirmAgreement', 'agreementId', agreementId);
            const localVarPath = `/agreements/{agreementId}/confirm`
                .replace(`{${"agreementId"}}`, encodeURIComponent(String(agreementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (appSessionId !== undefined) {
                localVarQueryParameter['appSessionId'] = appSessionId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Creates and sends a modified version of original Demand (a counter-proposal) adjusted to previously received Proposal (ie. Offer). Changes Proposal state to `Draft`. Returns created Proposal id.
         * @summary CounterProposalDemand - Responds with a bespoke Demand to received Offer.
         * @param {string} subscriptionId
         * @param {string} proposalId
         * @param {DemandOfferBase} demandOfferBase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterProposalDemand: (subscriptionId, proposalId, demandOfferBase, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'subscriptionId' is not null or undefined
            common_1.assertParamExists('counterProposalDemand', 'subscriptionId', subscriptionId);
            // verify required parameter 'proposalId' is not null or undefined
            common_1.assertParamExists('counterProposalDemand', 'proposalId', proposalId);
            // verify required parameter 'demandOfferBase' is not null or undefined
            common_1.assertParamExists('counterProposalDemand', 'demandOfferBase', demandOfferBase);
            const localVarPath = `/demands/{subscriptionId}/proposals/{proposalId}`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)))
                .replace(`{${"proposalId"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(demandOfferBase, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Initiates the Agreement handshake phase.  Formulates an Agreement artifact from the Proposal indicated by the received Proposal Id. Created Agreement is in `Proposal` state.  The Approval Expiry Date is added to Agreement artifact and implies the effective timeout on the whole Agreement Confirmation sequence.  A successful call to `createAgreement` shall immediately be followed by a `confirmAgreement` and `waitForApproval` call in order to listen for responses from the Provider.  **Note**: Moves given Proposal to `Approved` state.
         * @summary CreateAgreement - Creates Agreement from selected Proposal.
         * @param {AgreementProposal} agreementProposal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgreement: (agreementProposal, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'agreementProposal' is not null or undefined
            common_1.assertParamExists('createAgreement', 'agreementProposal', agreementProposal);
            const localVarPath = `/agreements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(agreementProposal, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary GetAgreement - Fetches agreement with given agreement id.
         * @param {string} agreementId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgreement: (agreementId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'agreementId' is not null or undefined
            common_1.assertParamExists('getAgreement', 'agreementId', agreementId);
            const localVarPath = `/agreements/{agreementId}`
                .replace(`{${"agreementId"}}`, encodeURIComponent(String(agreementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary GetDemands - Fetches all active Demands which have been published by the Requestor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDemands: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/demands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary GetProposalOffer - Fetches Proposal (Offer) with given id.
         * @param {string} subscriptionId
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProposalOffer: (subscriptionId, proposalId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'subscriptionId' is not null or undefined
            common_1.assertParamExists('getProposalOffer', 'subscriptionId', subscriptionId);
            // verify required parameter 'proposalId' is not null or undefined
            common_1.assertParamExists('getProposalOffer', 'proposalId', proposalId);
            const localVarPath = `/demands/{subscriptionId}/proposals/{proposalId}`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)))
                .replace(`{${"proposalId"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Sends a response to a received property value query.  The Market Matching Mechanism, when resolving the match relation for the specific Demand-Offer pair, is to detect the “dynamic” properties required (via constraints) by the other side. At this point, it is able to query the issuing node for those properties and submit the other side’s requested properties as the context of the query.  **Note**: The property query responses may be submitted in “chunks”, ie. the responder may choose to resolve ‘quick’/lightweight’ properties faster and provide response sooner, while still working on more time-consuming properties in the background. Therefore the response contains both the resolved properties, as well as list of properties which responder knows still require resolution.  **Note**: This method must be implemented for Market API Capability Level 2.
         * @summary QueryReplyDemands - Handles dynamic property query.
         * @param {string} subscriptionId
         * @param {string} queryId
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryReplyDemands: (subscriptionId, queryId, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'subscriptionId' is not null or undefined
            common_1.assertParamExists('queryReplyDemands', 'subscriptionId', subscriptionId);
            // verify required parameter 'queryId' is not null or undefined
            common_1.assertParamExists('queryReplyDemands', 'queryId', queryId);
            // verify required parameter 'body' is not null or undefined
            common_1.assertParamExists('queryReplyDemands', 'body', body);
            const localVarPath = `/demands/{subscriptionId}/propertyQuery/{queryId}`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)))
                .replace(`{${"queryId"}}`, encodeURIComponent(String(queryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Effectively ends a Negotiation chain - it explicitly indicates that the sender will not create another counter-Proposal.
         * @summary RejectProposalOffer - Rejects Proposal (Offer).
         * @param {string} subscriptionId
         * @param {string} proposalId
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectProposalOffer: (subscriptionId, proposalId, requestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'subscriptionId' is not null or undefined
            common_1.assertParamExists('rejectProposalOffer', 'subscriptionId', subscriptionId);
            // verify required parameter 'proposalId' is not null or undefined
            common_1.assertParamExists('rejectProposalOffer', 'proposalId', proposalId);
            const localVarPath = `/demands/{subscriptionId}/proposals/{proposalId}/reject`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)))
                .replace(`{${"proposalId"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Demand object can be considered an \"open\" or public Demand, as it is not directed at a specific Provider, but rather is sent to the market so that the matching mechanism implementation can associate relevant Offers.  **Note**: it is an \"atomic\" operation, ie. as soon as Subscription is placed, the Demand is published on the market.
         * @summary SubscribeDemand - Publishes Requestor capabilities via Demand.
         * @param {DemandOfferBase} demandOfferBase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeDemand: (demandOfferBase, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'demandOfferBase' is not null or undefined
            common_1.assertParamExists('subscribeDemand', 'demandOfferBase', demandOfferBase);
            const localVarPath = `/demands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(demandOfferBase, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Method to finish/close the Agreement while in `Approved` state.  The other party gets notified about calling party decision to terminate a \"running\" agreement.  **Note**: Can be invoked at any time after Agreement was approved by both sides.  **Note**: Financial and reputational consequences are not defined by this specification.
         * @summary TerminateAgreement - Terminates approved Agreement.
         * @param {string} agreementId
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateAgreement: (agreementId, requestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'agreementId' is not null or undefined
            common_1.assertParamExists('terminateAgreement', 'agreementId', agreementId);
            const localVarPath = `/agreements/{agreementId}/terminate`
                .replace(`{${"agreementId"}}`, encodeURIComponent(String(agreementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Stop receiving Proposals.  **Note**: this will terminate all pending `collectOffers` calls on this subscription. This implies, that client code should not `unsubscribeDemand` before it has received all expected/useful inputs from `collectOffers`.
         * @summary UnsubscribeDemand - Stop subscription for previously published Demand.
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsubscribeDemand: (subscriptionId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'subscriptionId' is not null or undefined
            common_1.assertParamExists('unsubscribeDemand', 'subscriptionId', subscriptionId);
            const localVarPath = `/demands/{subscriptionId}`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * This is a blocking operation. The call may be aborted by Requestor caller code. After the call is aborted or timed out, another `waitForApproval` call can be raised on the same Agreement Id.
         * @summary WaitForApproval - Waits for Agreement approval by the Provider.
         * @param {string} agreementId
         * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        waitForApproval: (agreementId, timeout, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'agreementId' is not null or undefined
            common_1.assertParamExists('waitForApproval', 'agreementId', agreementId);
            const localVarPath = `/agreements/{agreementId}/wait`
                .replace(`{${"agreementId"}}`, encodeURIComponent(String(agreementId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication app_key required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (timeout !== undefined) {
                localVarQueryParameter['timeout'] = timeout;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RequestorApi - functional programming interface
 * @export
 */
exports.RequestorApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.RequestorApiAxiosParamCreator(configuration);
    return {
        /**
         * It is only possible before Provider approved or rejected the Agreement, and before its Expiration.  Causes:   - the awaiting `approveAgreement` on Provider side to return with `Cancelled` response.   - the awaiting `waitForApproval` local call to return with `Cancelled` response.
         * @summary CancelAgreement - Cancels Agreement.
         * @param {string} agreementId
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAgreement(agreementId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cancelAgreement(agreementId, requestBody, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This is a blocking operation. It will not return until there is at least one new event. All events are appearing on both sides equally.  Returns Agreement related events: * `AgreementApprovedEvent` - Indicates that the Agreement has been approved   by the Provider.   - The Provider is now ready to accept a request to start an Activity     as described in the negotiated agreement.   - The Providers’s corresponding `approveAgreement` call returns `Approved`     after this event is emitted.  * `AgreementRejectedEvent` - Indicates that the Provider has called   `rejectAgreement`, which effectively stops the Agreement handshake.   The Requestor may attempt to return to the Negotiation phase by sending   a new Proposal.  * `AgreementCancelledEvent` - Indicates that the Requestor has called   `cancelAgreement`, which effectively stops the Agreement handshake.  * `AgreementTerminatedEvent` - Indicates that the Agreement has been   terminated by specified party (contains signature).
         * @summary CollectAgreementEvents - Collects events related to an Agreement.
         * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
         * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
         * @param {number} [maxEvents] Maximum number of events that server should return at once.
         * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectAgreementEvents(timeout, afterTimestamp, maxEvents, appSessionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.collectAgreementEvents(timeout, afterTimestamp, maxEvents, appSessionId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This is a blocking operation. It will not return until there is at least one new event. Returns Proposal related events: * `ProposalEvent` - Indicates that there is new Offer Proposal for this Demand. * `ProposalRejectedEvent` - Indicates that the Provider has rejected   our previous Proposal related to this Demand. This effectively ends a   Negotiation chain - it explicitly indicates that the sender will not   create another counter-Proposal.  * `PropertyQueryEvent` - not supported yet.  **Note**: When `collectOffers` is waiting, simultaneous call to `unsubscribeDemand` on the same `subscriptionId` should result in \"Subscription does not exist\" error returned from `collectOffers`.  **Note**: Specification requires this endpoint to support list of specific Proposal Ids to listen for messages related only to specific Proposals. This is not covered yet.
         * @summary CollectOffers - Reads Market responses to published Demand.
         * @param {string} subscriptionId
         * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
         * @param {number} [maxEvents] Maximum number of events that server should return at once.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectOffers(subscriptionId, timeout, maxEvents, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.collectOffers(subscriptionId, timeout, maxEvents, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Signs self-created Agreement and sends it to the Provider.  This call should immediately follow `createAgreement`.
         * @summary ConfirmAgreement - Sends Agreement proposal to the Provider.
         * @param {string} agreementId
         * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmAgreement(agreementId, appSessionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.confirmAgreement(agreementId, appSessionId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Creates and sends a modified version of original Demand (a counter-proposal) adjusted to previously received Proposal (ie. Offer). Changes Proposal state to `Draft`. Returns created Proposal id.
         * @summary CounterProposalDemand - Responds with a bespoke Demand to received Offer.
         * @param {string} subscriptionId
         * @param {string} proposalId
         * @param {DemandOfferBase} demandOfferBase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterProposalDemand(subscriptionId, proposalId, demandOfferBase, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.counterProposalDemand(subscriptionId, proposalId, demandOfferBase, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Initiates the Agreement handshake phase.  Formulates an Agreement artifact from the Proposal indicated by the received Proposal Id. Created Agreement is in `Proposal` state.  The Approval Expiry Date is added to Agreement artifact and implies the effective timeout on the whole Agreement Confirmation sequence.  A successful call to `createAgreement` shall immediately be followed by a `confirmAgreement` and `waitForApproval` call in order to listen for responses from the Provider.  **Note**: Moves given Proposal to `Approved` state.
         * @summary CreateAgreement - Creates Agreement from selected Proposal.
         * @param {AgreementProposal} agreementProposal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgreement(agreementProposal, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAgreement(agreementProposal, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary GetAgreement - Fetches agreement with given agreement id.
         * @param {string} agreementId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgreement(agreementId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAgreement(agreementId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary GetDemands - Fetches all active Demands which have been published by the Requestor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDemands(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDemands(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary GetProposalOffer - Fetches Proposal (Offer) with given id.
         * @param {string} subscriptionId
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProposalOffer(subscriptionId, proposalId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProposalOffer(subscriptionId, proposalId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Sends a response to a received property value query.  The Market Matching Mechanism, when resolving the match relation for the specific Demand-Offer pair, is to detect the “dynamic” properties required (via constraints) by the other side. At this point, it is able to query the issuing node for those properties and submit the other side’s requested properties as the context of the query.  **Note**: The property query responses may be submitted in “chunks”, ie. the responder may choose to resolve ‘quick’/lightweight’ properties faster and provide response sooner, while still working on more time-consuming properties in the background. Therefore the response contains both the resolved properties, as well as list of properties which responder knows still require resolution.  **Note**: This method must be implemented for Market API Capability Level 2.
         * @summary QueryReplyDemands - Handles dynamic property query.
         * @param {string} subscriptionId
         * @param {string} queryId
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryReplyDemands(subscriptionId, queryId, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.queryReplyDemands(subscriptionId, queryId, body, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Effectively ends a Negotiation chain - it explicitly indicates that the sender will not create another counter-Proposal.
         * @summary RejectProposalOffer - Rejects Proposal (Offer).
         * @param {string} subscriptionId
         * @param {string} proposalId
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectProposalOffer(subscriptionId, proposalId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.rejectProposalOffer(subscriptionId, proposalId, requestBody, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Demand object can be considered an \"open\" or public Demand, as it is not directed at a specific Provider, but rather is sent to the market so that the matching mechanism implementation can associate relevant Offers.  **Note**: it is an \"atomic\" operation, ie. as soon as Subscription is placed, the Demand is published on the market.
         * @summary SubscribeDemand - Publishes Requestor capabilities via Demand.
         * @param {DemandOfferBase} demandOfferBase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeDemand(demandOfferBase, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.subscribeDemand(demandOfferBase, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Method to finish/close the Agreement while in `Approved` state.  The other party gets notified about calling party decision to terminate a \"running\" agreement.  **Note**: Can be invoked at any time after Agreement was approved by both sides.  **Note**: Financial and reputational consequences are not defined by this specification.
         * @summary TerminateAgreement - Terminates approved Agreement.
         * @param {string} agreementId
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateAgreement(agreementId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.terminateAgreement(agreementId, requestBody, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Stop receiving Proposals.  **Note**: this will terminate all pending `collectOffers` calls on this subscription. This implies, that client code should not `unsubscribeDemand` before it has received all expected/useful inputs from `collectOffers`.
         * @summary UnsubscribeDemand - Stop subscription for previously published Demand.
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsubscribeDemand(subscriptionId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.unsubscribeDemand(subscriptionId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * This is a blocking operation. The call may be aborted by Requestor caller code. After the call is aborted or timed out, another `waitForApproval` call can be raised on the same Agreement Id.
         * @summary WaitForApproval - Waits for Agreement approval by the Provider.
         * @param {string} agreementId
         * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        waitForApproval(agreementId, timeout, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.waitForApproval(agreementId, timeout, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * RequestorApi - factory interface
 * @export
 */
exports.RequestorApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.RequestorApiFp(configuration);
    return {
        /**
         * It is only possible before Provider approved or rejected the Agreement, and before its Expiration.  Causes:   - the awaiting `approveAgreement` on Provider side to return with `Cancelled` response.   - the awaiting `waitForApproval` local call to return with `Cancelled` response.
         * @summary CancelAgreement - Cancels Agreement.
         * @param {string} agreementId
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAgreement(agreementId, requestBody, options) {
            return localVarFp.cancelAgreement(agreementId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a blocking operation. It will not return until there is at least one new event. All events are appearing on both sides equally.  Returns Agreement related events: * `AgreementApprovedEvent` - Indicates that the Agreement has been approved   by the Provider.   - The Provider is now ready to accept a request to start an Activity     as described in the negotiated agreement.   - The Providers’s corresponding `approveAgreement` call returns `Approved`     after this event is emitted.  * `AgreementRejectedEvent` - Indicates that the Provider has called   `rejectAgreement`, which effectively stops the Agreement handshake.   The Requestor may attempt to return to the Negotiation phase by sending   a new Proposal.  * `AgreementCancelledEvent` - Indicates that the Requestor has called   `cancelAgreement`, which effectively stops the Agreement handshake.  * `AgreementTerminatedEvent` - Indicates that the Agreement has been   terminated by specified party (contains signature).
         * @summary CollectAgreementEvents - Collects events related to an Agreement.
         * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
         * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
         * @param {number} [maxEvents] Maximum number of events that server should return at once.
         * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectAgreementEvents(timeout, afterTimestamp, maxEvents, appSessionId, options) {
            return localVarFp.collectAgreementEvents(timeout, afterTimestamp, maxEvents, appSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a blocking operation. It will not return until there is at least one new event. Returns Proposal related events: * `ProposalEvent` - Indicates that there is new Offer Proposal for this Demand. * `ProposalRejectedEvent` - Indicates that the Provider has rejected   our previous Proposal related to this Demand. This effectively ends a   Negotiation chain - it explicitly indicates that the sender will not   create another counter-Proposal.  * `PropertyQueryEvent` - not supported yet.  **Note**: When `collectOffers` is waiting, simultaneous call to `unsubscribeDemand` on the same `subscriptionId` should result in \"Subscription does not exist\" error returned from `collectOffers`.  **Note**: Specification requires this endpoint to support list of specific Proposal Ids to listen for messages related only to specific Proposals. This is not covered yet.
         * @summary CollectOffers - Reads Market responses to published Demand.
         * @param {string} subscriptionId
         * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
         * @param {number} [maxEvents] Maximum number of events that server should return at once.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectOffers(subscriptionId, timeout, maxEvents, options) {
            return localVarFp.collectOffers(subscriptionId, timeout, maxEvents, options).then((request) => request(axios, basePath));
        },
        /**
         * Signs self-created Agreement and sends it to the Provider.  This call should immediately follow `createAgreement`.
         * @summary ConfirmAgreement - Sends Agreement proposal to the Provider.
         * @param {string} agreementId
         * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmAgreement(agreementId, appSessionId, options) {
            return localVarFp.confirmAgreement(agreementId, appSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates and sends a modified version of original Demand (a counter-proposal) adjusted to previously received Proposal (ie. Offer). Changes Proposal state to `Draft`. Returns created Proposal id.
         * @summary CounterProposalDemand - Responds with a bespoke Demand to received Offer.
         * @param {string} subscriptionId
         * @param {string} proposalId
         * @param {DemandOfferBase} demandOfferBase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        counterProposalDemand(subscriptionId, proposalId, demandOfferBase, options) {
            return localVarFp.counterProposalDemand(subscriptionId, proposalId, demandOfferBase, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates the Agreement handshake phase.  Formulates an Agreement artifact from the Proposal indicated by the received Proposal Id. Created Agreement is in `Proposal` state.  The Approval Expiry Date is added to Agreement artifact and implies the effective timeout on the whole Agreement Confirmation sequence.  A successful call to `createAgreement` shall immediately be followed by a `confirmAgreement` and `waitForApproval` call in order to listen for responses from the Provider.  **Note**: Moves given Proposal to `Approved` state.
         * @summary CreateAgreement - Creates Agreement from selected Proposal.
         * @param {AgreementProposal} agreementProposal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgreement(agreementProposal, options) {
            return localVarFp.createAgreement(agreementProposal, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetAgreement - Fetches agreement with given agreement id.
         * @param {string} agreementId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgreement(agreementId, options) {
            return localVarFp.getAgreement(agreementId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetDemands - Fetches all active Demands which have been published by the Requestor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDemands(options) {
            return localVarFp.getDemands(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GetProposalOffer - Fetches Proposal (Offer) with given id.
         * @param {string} subscriptionId
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProposalOffer(subscriptionId, proposalId, options) {
            return localVarFp.getProposalOffer(subscriptionId, proposalId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a response to a received property value query.  The Market Matching Mechanism, when resolving the match relation for the specific Demand-Offer pair, is to detect the “dynamic” properties required (via constraints) by the other side. At this point, it is able to query the issuing node for those properties and submit the other side’s requested properties as the context of the query.  **Note**: The property query responses may be submitted in “chunks”, ie. the responder may choose to resolve ‘quick’/lightweight’ properties faster and provide response sooner, while still working on more time-consuming properties in the background. Therefore the response contains both the resolved properties, as well as list of properties which responder knows still require resolution.  **Note**: This method must be implemented for Market API Capability Level 2.
         * @summary QueryReplyDemands - Handles dynamic property query.
         * @param {string} subscriptionId
         * @param {string} queryId
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryReplyDemands(subscriptionId, queryId, body, options) {
            return localVarFp.queryReplyDemands(subscriptionId, queryId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Effectively ends a Negotiation chain - it explicitly indicates that the sender will not create another counter-Proposal.
         * @summary RejectProposalOffer - Rejects Proposal (Offer).
         * @param {string} subscriptionId
         * @param {string} proposalId
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectProposalOffer(subscriptionId, proposalId, requestBody, options) {
            return localVarFp.rejectProposalOffer(subscriptionId, proposalId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Demand object can be considered an \"open\" or public Demand, as it is not directed at a specific Provider, but rather is sent to the market so that the matching mechanism implementation can associate relevant Offers.  **Note**: it is an \"atomic\" operation, ie. as soon as Subscription is placed, the Demand is published on the market.
         * @summary SubscribeDemand - Publishes Requestor capabilities via Demand.
         * @param {DemandOfferBase} demandOfferBase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeDemand(demandOfferBase, options) {
            return localVarFp.subscribeDemand(demandOfferBase, options).then((request) => request(axios, basePath));
        },
        /**
         * Method to finish/close the Agreement while in `Approved` state.  The other party gets notified about calling party decision to terminate a \"running\" agreement.  **Note**: Can be invoked at any time after Agreement was approved by both sides.  **Note**: Financial and reputational consequences are not defined by this specification.
         * @summary TerminateAgreement - Terminates approved Agreement.
         * @param {string} agreementId
         * @param {{ [key: string]: object; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateAgreement(agreementId, requestBody, options) {
            return localVarFp.terminateAgreement(agreementId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Stop receiving Proposals.  **Note**: this will terminate all pending `collectOffers` calls on this subscription. This implies, that client code should not `unsubscribeDemand` before it has received all expected/useful inputs from `collectOffers`.
         * @summary UnsubscribeDemand - Stop subscription for previously published Demand.
         * @param {string} subscriptionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsubscribeDemand(subscriptionId, options) {
            return localVarFp.unsubscribeDemand(subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a blocking operation. The call may be aborted by Requestor caller code. After the call is aborted or timed out, another `waitForApproval` call can be raised on the same Agreement Id.
         * @summary WaitForApproval - Waits for Agreement approval by the Provider.
         * @param {string} agreementId
         * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        waitForApproval(agreementId, timeout, options) {
            return localVarFp.waitForApproval(agreementId, timeout, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RequestorApi - object-oriented interface
 * @export
 * @class RequestorApi
 * @extends {BaseAPI}
 */
class RequestorApi extends base_1.BaseAPI {
    /**
     * It is only possible before Provider approved or rejected the Agreement, and before its Expiration.  Causes:   - the awaiting `approveAgreement` on Provider side to return with `Cancelled` response.   - the awaiting `waitForApproval` local call to return with `Cancelled` response.
     * @summary CancelAgreement - Cancels Agreement.
     * @param {string} agreementId
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    cancelAgreement(agreementId, requestBody, options) {
        return exports.RequestorApiFp(this.configuration).cancelAgreement(agreementId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This is a blocking operation. It will not return until there is at least one new event. All events are appearing on both sides equally.  Returns Agreement related events: * `AgreementApprovedEvent` - Indicates that the Agreement has been approved   by the Provider.   - The Provider is now ready to accept a request to start an Activity     as described in the negotiated agreement.   - The Providers’s corresponding `approveAgreement` call returns `Approved`     after this event is emitted.  * `AgreementRejectedEvent` - Indicates that the Provider has called   `rejectAgreement`, which effectively stops the Agreement handshake.   The Requestor may attempt to return to the Negotiation phase by sending   a new Proposal.  * `AgreementCancelledEvent` - Indicates that the Requestor has called   `cancelAgreement`, which effectively stops the Agreement handshake.  * `AgreementTerminatedEvent` - Indicates that the Agreement has been   terminated by specified party (contains signature).
     * @summary CollectAgreementEvents - Collects events related to an Agreement.
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {string} [afterTimestamp] Apply only to records created later than the specified timestamp
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    collectAgreementEvents(timeout, afterTimestamp, maxEvents, appSessionId, options) {
        return exports.RequestorApiFp(this.configuration).collectAgreementEvents(timeout, afterTimestamp, maxEvents, appSessionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This is a blocking operation. It will not return until there is at least one new event. Returns Proposal related events: * `ProposalEvent` - Indicates that there is new Offer Proposal for this Demand. * `ProposalRejectedEvent` - Indicates that the Provider has rejected   our previous Proposal related to this Demand. This effectively ends a   Negotiation chain - it explicitly indicates that the sender will not   create another counter-Proposal.  * `PropertyQueryEvent` - not supported yet.  **Note**: When `collectOffers` is waiting, simultaneous call to `unsubscribeDemand` on the same `subscriptionId` should result in \"Subscription does not exist\" error returned from `collectOffers`.  **Note**: Specification requires this endpoint to support list of specific Proposal Ids to listen for messages related only to specific Proposals. This is not covered yet.
     * @summary CollectOffers - Reads Market responses to published Demand.
     * @param {string} subscriptionId
     * @param {number} [timeout] Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (&#x60;0.0&#x60; means it should return immediately if there are no events)
     * @param {number} [maxEvents] Maximum number of events that server should return at once.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    collectOffers(subscriptionId, timeout, maxEvents, options) {
        return exports.RequestorApiFp(this.configuration).collectOffers(subscriptionId, timeout, maxEvents, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Signs self-created Agreement and sends it to the Provider.  This call should immediately follow `createAgreement`.
     * @summary ConfirmAgreement - Sends Agreement proposal to the Provider.
     * @param {string} agreementId
     * @param {string} [appSessionId] A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    confirmAgreement(agreementId, appSessionId, options) {
        return exports.RequestorApiFp(this.configuration).confirmAgreement(agreementId, appSessionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates and sends a modified version of original Demand (a counter-proposal) adjusted to previously received Proposal (ie. Offer). Changes Proposal state to `Draft`. Returns created Proposal id.
     * @summary CounterProposalDemand - Responds with a bespoke Demand to received Offer.
     * @param {string} subscriptionId
     * @param {string} proposalId
     * @param {DemandOfferBase} demandOfferBase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    counterProposalDemand(subscriptionId, proposalId, demandOfferBase, options) {
        return exports.RequestorApiFp(this.configuration).counterProposalDemand(subscriptionId, proposalId, demandOfferBase, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Initiates the Agreement handshake phase.  Formulates an Agreement artifact from the Proposal indicated by the received Proposal Id. Created Agreement is in `Proposal` state.  The Approval Expiry Date is added to Agreement artifact and implies the effective timeout on the whole Agreement Confirmation sequence.  A successful call to `createAgreement` shall immediately be followed by a `confirmAgreement` and `waitForApproval` call in order to listen for responses from the Provider.  **Note**: Moves given Proposal to `Approved` state.
     * @summary CreateAgreement - Creates Agreement from selected Proposal.
     * @param {AgreementProposal} agreementProposal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    createAgreement(agreementProposal, options) {
        return exports.RequestorApiFp(this.configuration).createAgreement(agreementProposal, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetAgreement - Fetches agreement with given agreement id.
     * @param {string} agreementId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getAgreement(agreementId, options) {
        return exports.RequestorApiFp(this.configuration).getAgreement(agreementId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetDemands - Fetches all active Demands which have been published by the Requestor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getDemands(options) {
        return exports.RequestorApiFp(this.configuration).getDemands(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GetProposalOffer - Fetches Proposal (Offer) with given id.
     * @param {string} subscriptionId
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    getProposalOffer(subscriptionId, proposalId, options) {
        return exports.RequestorApiFp(this.configuration).getProposalOffer(subscriptionId, proposalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Sends a response to a received property value query.  The Market Matching Mechanism, when resolving the match relation for the specific Demand-Offer pair, is to detect the “dynamic” properties required (via constraints) by the other side. At this point, it is able to query the issuing node for those properties and submit the other side’s requested properties as the context of the query.  **Note**: The property query responses may be submitted in “chunks”, ie. the responder may choose to resolve ‘quick’/lightweight’ properties faster and provide response sooner, while still working on more time-consuming properties in the background. Therefore the response contains both the resolved properties, as well as list of properties which responder knows still require resolution.  **Note**: This method must be implemented for Market API Capability Level 2.
     * @summary QueryReplyDemands - Handles dynamic property query.
     * @param {string} subscriptionId
     * @param {string} queryId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    queryReplyDemands(subscriptionId, queryId, body, options) {
        return exports.RequestorApiFp(this.configuration).queryReplyDemands(subscriptionId, queryId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Effectively ends a Negotiation chain - it explicitly indicates that the sender will not create another counter-Proposal.
     * @summary RejectProposalOffer - Rejects Proposal (Offer).
     * @param {string} subscriptionId
     * @param {string} proposalId
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    rejectProposalOffer(subscriptionId, proposalId, requestBody, options) {
        return exports.RequestorApiFp(this.configuration).rejectProposalOffer(subscriptionId, proposalId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Demand object can be considered an \"open\" or public Demand, as it is not directed at a specific Provider, but rather is sent to the market so that the matching mechanism implementation can associate relevant Offers.  **Note**: it is an \"atomic\" operation, ie. as soon as Subscription is placed, the Demand is published on the market.
     * @summary SubscribeDemand - Publishes Requestor capabilities via Demand.
     * @param {DemandOfferBase} demandOfferBase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    subscribeDemand(demandOfferBase, options) {
        return exports.RequestorApiFp(this.configuration).subscribeDemand(demandOfferBase, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Method to finish/close the Agreement while in `Approved` state.  The other party gets notified about calling party decision to terminate a \"running\" agreement.  **Note**: Can be invoked at any time after Agreement was approved by both sides.  **Note**: Financial and reputational consequences are not defined by this specification.
     * @summary TerminateAgreement - Terminates approved Agreement.
     * @param {string} agreementId
     * @param {{ [key: string]: object; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    terminateAgreement(agreementId, requestBody, options) {
        return exports.RequestorApiFp(this.configuration).terminateAgreement(agreementId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Stop receiving Proposals.  **Note**: this will terminate all pending `collectOffers` calls on this subscription. This implies, that client code should not `unsubscribeDemand` before it has received all expected/useful inputs from `collectOffers`.
     * @summary UnsubscribeDemand - Stop subscription for previously published Demand.
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    unsubscribeDemand(subscriptionId, options) {
        return exports.RequestorApiFp(this.configuration).unsubscribeDemand(subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This is a blocking operation. The call may be aborted by Requestor caller code. After the call is aborted or timed out, another `waitForApproval` call can be raised on the same Agreement Id.
     * @summary WaitForApproval - Waits for Agreement approval by the Provider.
     * @param {string} agreementId
     * @param {number} [timeout] Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party\&#39;s response indefinitely)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestorApi
     */
    waitForApproval(agreementId, timeout, options) {
        return exports.RequestorApiFp(this.configuration).waitForApproval(agreementId, timeout, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RequestorApi = RequestorApi;
