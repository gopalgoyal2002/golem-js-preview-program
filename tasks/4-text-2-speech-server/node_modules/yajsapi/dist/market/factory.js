import { Demand } from './demand.js';
import { DemandConfig } from './config.js';
import * as events from '../events/events.js';
import { DecorationsBuilder } from './builder.js';
export class DemandFactory {
    taskPackage;
    allocations;
    options;
    constructor(taskPackage, allocations, options) {
        this.taskPackage = taskPackage;
        this.allocations = allocations;
        this.options = new DemandConfig(options);
    }
    async create() {
        const decorations = await this.getDecorations();
        const demandRequest = new DecorationsBuilder().addDecorations(decorations).getDemandRequest();
        const { data: id } = await this.options.api.subscribeDemand(demandRequest).catch((e) => {
            const reason = e.response?.data?.message || e.toString();
            this.options.eventTarget?.dispatchEvent(new events.SubscriptionFailed({ reason }));
            throw new Error(`Could not publish demand on the market. ${reason}`);
        });
        this.options.eventTarget?.dispatchEvent(new events.SubscriptionCreated({ id }));
        this.options.logger?.info(`Demand published on the market`);
        return new Demand(id, demandRequest, this.options);
    }
    async getDecorations() {
        const taskDecorations = await this.taskPackage.getDemandDecoration();
        const allocationDecorations = [];
        for (const allocation of this.allocations) {
            allocationDecorations.push(await allocation.getDemandDecoration());
        }
        const baseDecoration = this.getBaseDecorations();
        return [taskDecorations, ...allocationDecorations, baseDecoration];
    }
    getBaseDecorations() {
        return new DecorationsBuilder()
            .addProperty("golem.srv.caps.multi-activity", true)
            .addProperty("golem.srv.comp.expiration", Date.now() + this.options.expiration)
            .addProperty("golem.node.debug.subnet", this.options.subnetTag)
            .addConstraint("golem.com.pricing.model", "linear")
            .addConstraint("golem.node.debug.subnet", this.options.subnetTag)
            .getDecorations();
    }
}
//# sourceMappingURL=factory.js.map