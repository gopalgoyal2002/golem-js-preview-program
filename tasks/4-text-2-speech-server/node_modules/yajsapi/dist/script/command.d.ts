/// <reference types="node" />
import { ExeScriptRequest } from "ya-ts-client/dist/ya-activity/src/models/index.js";
import { StorageProvider } from "../storage/index.js";
export declare class Command {
    private commandName;
    protected args: object;
    constructor(commandName: string, args?: object);
    toJson(): {
        [x: string]: object;
    };
    toExeScriptRequest(): ExeScriptRequest;
    before(): Promise<void>;
    after(): Promise<void>;
}
export declare class Deploy extends Command {
    constructor(args?: object);
}
export declare class Start extends Command {
    constructor(args?: object);
}
export type Capture = {
    stdout?: CaptureMode;
    stderr?: CaptureMode;
};
type CaptureMode = {
    atEnd: {
        part?: CapturePart;
        format?: CaptureFormat;
    };
} | {
    stream: {
        limit?: number;
        format?: CaptureFormat;
    };
};
type CapturePart = {
    head: number;
} | {
    tail: number;
} | {
    headTail: number;
};
type CaptureFormat = "string" | "binary";
export declare class Run extends Command {
    constructor(cmd: string, args?: string[] | null, env?: object | null, capture?: Capture);
}
export declare class Terminate extends Command {
    constructor(args?: object);
}
export declare class Transfer extends Command {
    protected from?: string | undefined;
    protected to?: string | undefined;
    constructor(from?: string | undefined, to?: string | undefined, args?: object);
}
export declare class UploadFile extends Transfer {
    private storageProvider;
    private src;
    private dstPath;
    constructor(storageProvider: StorageProvider, src: string | Buffer, dstPath: string);
    before(): Promise<void>;
    after(): Promise<void>;
}
export declare class DownloadFile extends Transfer {
    private storageProvider;
    private srcPath;
    private dstPath;
    constructor(storageProvider: StorageProvider, srcPath: string, dstPath: string);
    before(): Promise<void>;
}
export {};
