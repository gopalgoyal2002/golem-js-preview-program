import { Activity } from './activity.js';
import { ActivityConfig } from './config.js';
import { Events } from '../events/index.js';
export class ActivityFactory {
    agreementId;
    options;
    constructor(agreementId, options) {
        this.agreementId = agreementId;
        this.options = new ActivityConfig(options);
    }
    async create(secure = false) {
        try {
            if (secure) {
                throw new Error("Not implemented");
            }
            return this.createActivity(this.agreementId, this.options);
        }
        catch (error) {
            throw error?.response?.data?.message || error;
        }
    }
    async createActivity(agreementId, options) {
        const { data } = await this.options.api.control.createActivity({ agreementId });
        const id = typeof data == "string" ? data : data.activityId;
        this.options.logger?.debug(`Activity ${id} created`);
        this.options.eventTarget?.dispatchEvent(new Events.ActivityCreated({ id, agreementId }));
        return new Activity(id, agreementId, options);
    }
}
//# sourceMappingURL=factory.js.map