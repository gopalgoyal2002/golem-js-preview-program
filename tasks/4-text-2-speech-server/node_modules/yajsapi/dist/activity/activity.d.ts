/// <reference types="node" />
import { Readable } from "stream";
import { Logger } from "../utils/index.js";
import { ActivityConfig } from "./config.js";
export declare enum ActivityStateEnum {
    New = "New",
    Initialized = "Initialized",
    Deployed = "Deployed",
    Ready = "Ready",
    Unresponsive = "Unresponsive",
    Terminated = "Terminated"
}
export interface ExeScriptRequest {
    text: string;
}
export interface ActivityOptions {
    yagnaOptions?: {
        apiKey?: string;
        basePath?: string;
    };
    activityRequestTimeout?: number;
    activityExecuteTimeout?: number;
    activityExeBatchResultsFetchInterval?: number;
    logger?: Logger;
    eventTarget?: EventTarget;
}
export declare class Activity {
    readonly id: any;
    readonly agreementId: any;
    protected readonly options: ActivityConfig;
    private readonly logger?;
    private isRunning;
    constructor(id: any, agreementId: any, options: ActivityConfig);
    static create(agreementId: string, options?: ActivityOptions, secure?: boolean): Promise<Activity>;
    execute(script: ExeScriptRequest, stream?: boolean, timeout?: number): Promise<Readable>;
    stop(): Promise<boolean>;
    getState(): Promise<ActivityStateEnum>;
    protected send(script: ExeScriptRequest): Promise<string>;
    private end;
    private pollingBatch;
    private streamingBatch;
    private handleError;
    private isTimeoutError;
    private isGsbError;
    private isTerminated;
    private parseEventToResult;
}
