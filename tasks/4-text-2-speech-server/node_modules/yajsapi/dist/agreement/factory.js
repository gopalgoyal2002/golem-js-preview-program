import { Agreement } from "./agreement.js";
import { AgreementConfig } from "./config.js";
import { Events } from "../events/index.js";
export class AgreementFactory {
    logger;
    options;
    constructor(agreementOptions) {
        this.options = new AgreementConfig(agreementOptions);
        this.logger = agreementOptions?.logger;
    }
    async create(proposalId) {
        try {
            const agreementProposalRequest = {
                proposalId,
                validTo: new Date(+new Date() + 3600).toISOString(),
            };
            const { data: agreementId } = await this.options.api.createAgreement(agreementProposalRequest, {
                timeout: this.options.agreementRequestTimeout,
            });
            const { data } = await this.options.api.getAgreement(agreementId);
            const provider = {
                name: data?.offer.properties["golem.node.id.name"],
                id: data?.offer.providerId,
            };
            if (!provider.id || !provider.name)
                throw new Error("Unable to get provider info");
            const agreement = new Agreement(agreementId, provider, this.options);
            this.options.eventTarget?.dispatchEvent(new Events.AgreementCreated({
                id: agreementId,
                providerId: provider.id,
                providerName: provider.name,
                proposalId,
            }));
            this.logger?.debug(`Agreement ${agreementId} created`);
            return agreement;
        }
        catch (error) {
            throw new Error(`Unable to create agreement ${error?.response?.data?.message || error?.response?.data || error}`);
        }
    }
}
//# sourceMappingURL=factory.js.map