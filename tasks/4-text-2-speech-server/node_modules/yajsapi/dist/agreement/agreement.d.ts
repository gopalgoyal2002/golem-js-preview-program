import { Logger } from "../utils/index.js";
import { YagnaOptions } from "../executor/index.js";
import { AgreementConfig } from "./config.js";
export interface ProviderInfo {
    name: string;
    id: string;
}
export declare enum AgreementStateEnum {
    Proposal = "Proposal",
    Pending = "Pending",
    Cancelled = "Cancelled",
    Rejected = "Rejected",
    Approved = "Approved",
    Expired = "Expired",
    Terminated = "Terminated"
}
export interface AgreementOptions {
    yagnaOptions?: YagnaOptions;
    agreementRequestTimeout?: number;
    agreementWaitingForApprovalTimeout?: number;
    logger?: Logger;
    eventTarget?: EventTarget;
}
export declare class Agreement {
    readonly id: any;
    readonly provider: ProviderInfo;
    private readonly options;
    private agreementData?;
    private logger?;
    constructor(id: any, provider: ProviderInfo, options: AgreementConfig);
    static create(proposalId: string, agreementOptions?: AgreementOptions): Promise<Agreement>;
    refreshDetails(): Promise<void>;
    getState(): Promise<AgreementStateEnum>;
    confirm(): Promise<void>;
    isFinalState(): Promise<boolean>;
    terminate(reason?: {
        [key: string]: string;
    }): Promise<void>;
}
