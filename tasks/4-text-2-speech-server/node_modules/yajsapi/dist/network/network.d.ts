import { Logger } from "../utils/index.js";
import { YagnaOptions } from "../executor/index.js";
import { NetworkConfig } from "./config.js";
import { NetworkNode } from "./node.js";
export interface NetworkOptions {
    networkOwnerId: string;
    yagnaOptions?: YagnaOptions;
    networkIp?: string;
    networkOwnerIp?: string;
    networkMask?: string;
    networkGateway?: string;
    logger?: Logger;
}
export interface NetworkInfo {
    id: string;
    ip: string;
    mask: string;
    nodes: {
        [ip: string]: string;
    };
}
export declare class NetworkError extends Error {
}
export declare class Network {
    readonly id: string;
    readonly config: NetworkConfig;
    private readonly ip;
    private readonly ipRange;
    private ipIterator;
    private mask;
    private ownerId;
    private ownerIp;
    private gateway?;
    private nodes;
    private logger?;
    static create(options: NetworkOptions): Promise<Network>;
    private constructor();
    getNetworkInfo(): NetworkInfo;
    addNode(nodeId: string, ip?: string): Promise<NetworkNode>;
    remove(): Promise<boolean>;
    private nextAddress;
    private ensureIpInNetwork;
    private ensureIpUnique;
    private ensureIdUnique;
    private isIpUnique;
    private getUrl;
}
