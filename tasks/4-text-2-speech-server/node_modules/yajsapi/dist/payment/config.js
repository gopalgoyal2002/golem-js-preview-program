import { Configuration } from "ya-ts-client/dist/ya-payment/index.js";
import { RequestorApi } from "ya-ts-client/dist/ya-payment/api.js";
const DEFAULTS = {
    basePath: "http://127.0.0.1:7465",
    budget: 1.0,
    payment: { driver: "erc20", network: "rinkeby" },
    paymentTimeout: 20000,
    allocationExpires: 1000 * 60 * 30,
    invoiceReceiveTimeout: 1000 * 60 * 5,
    maxInvoiceEvents: 10,
    maxDebitNotesEvents: 10,
    invoiceFetchingInterval: 2000,
    debitNotesFetchingInterval: 2000,
    payingInterval: 2000,
    paymentRequestTimeout: 10000,
};
class BaseConfig {
    options;
    yagnaOptions;
    paymentTimeout;
    api;
    logger;
    eventTarget;
    payment;
    paymentRequestTimeout;
    constructor(options) {
        this.options = options;
        this.yagnaOptions = options?.yagnaOptions;
        const apiKey = options?.yagnaOptions?.apiKey || process.env.YAGNA_APPKEY;
        if (!apiKey)
            throw new Error("Api key not defined");
        const basePath = options?.yagnaOptions?.basePath || process.env.YAGNA_API_URL || DEFAULTS.basePath;
        const apiConfig = new Configuration({ apiKey, basePath: `${basePath}/payment-api/v1`, accessToken: apiKey });
        this.api = new RequestorApi(apiConfig);
        this.paymentTimeout = options?.paymentTimeout || DEFAULTS.paymentTimeout;
        this.payment = {
            driver: options?.payment?.driver || DEFAULTS.payment.driver,
            network: options?.payment?.network || DEFAULTS.payment.network,
        };
        this.logger = options?.logger;
        this.eventTarget = options?.eventTarget;
        this.paymentRequestTimeout = options?.paymentRequestTimeout || DEFAULTS.paymentRequestTimeout;
    }
}
export class PaymentConfig extends BaseConfig {
    invoiceFetchingInterval;
    debitNotesFetchingInterval;
    payingInterval;
    maxInvoiceEvents;
    maxDebitNotesEvents;
    constructor(options) {
        super(options);
        this.invoiceFetchingInterval = options?.invoiceFetchingInterval || DEFAULTS.invoiceFetchingInterval;
        this.debitNotesFetchingInterval = options?.debitNotesFetchingInterval || DEFAULTS.debitNotesFetchingInterval;
        this.maxInvoiceEvents = options?.maxInvoiceEvents || DEFAULTS.maxInvoiceEvents;
        this.maxDebitNotesEvents = options?.maxDebitNotesEvents || DEFAULTS.maxDebitNotesEvents;
        this.payingInterval = options?.payingInterval || DEFAULTS.payingInterval;
    }
}
export class AllocationConfig extends BaseConfig {
    budget;
    payment;
    expires;
    account;
    constructor(options) {
        super(options);
        if (!options || !options?.account)
            throw new Error("Account option is required");
        this.account = options.account;
        this.budget = options?.budget || DEFAULTS.budget;
        this.payment = {
            driver: options?.payment?.driver || DEFAULTS.payment.driver,
            network: options?.payment?.network || DEFAULTS.payment.network,
        };
        this.expires = options?.expires || DEFAULTS.allocationExpires;
    }
}
export class InvoiceConfig extends BaseConfig {
    constructor(options) {
        super(options);
    }
}
export class AccountConfig extends BaseConfig {
    constructor(options) {
        const apiKey = options?.yagnaOptions?.apiKey || process.env.YAGNA_APPKEY;
        if (!apiKey)
            throw new Error("Api key not defined");
        const yagnaOptions = {
            apiKey,
            basePath: options?.yagnaOptions?.basePath || process.env.YAGNA_API_URL || DEFAULTS.basePath,
        };
        super({ ...options, yagnaOptions });
    }
}
//# sourceMappingURL=config.js.map