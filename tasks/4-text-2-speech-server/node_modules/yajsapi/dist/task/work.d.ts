import { Activity, Result } from "../activity/index.js";
import { StorageProvider } from "../storage/index.js";
import { Logger } from "../utils/index.js";
import { Batch } from "./index.js";
import { NetworkNode } from "../network/index.js";
export type Worker<InputType = unknown, OutputType = unknown> = (ctx: WorkContext, data?: InputType) => Promise<OutputType | undefined>;
export interface WorkOptions {
    workTimeout?: number;
    activityStateCheckingInterval?: number;
    provider?: {
        name: string;
        id: string;
        networkConfig?: object;
    };
    storageProvider?: StorageProvider;
    networkNode?: NetworkNode;
    logger?: Logger;
    initWorker?: Worker<undefined>;
    isRunning: () => boolean;
}
export declare class WorkContext {
    private activity;
    private options?;
    readonly provider?: {
        name: string;
        id: string;
        networkConfig?: object;
    };
    private readonly workTimeout;
    private readonly logger?;
    private readonly activityStateCheckingInterval;
    private readonly storageProvider?;
    private readonly networkNode?;
    constructor(activity: Activity, options?: WorkOptions | undefined);
    before(): Promise<Result[] | void>;
    run(...args: Array<string | string[]>): Promise<Result>;
    uploadFile(src: string, dst: string): Promise<Result>;
    uploadJson(json: object, dst: string): Promise<Result>;
    downloadFile(src: string, dst: string): Promise<Result>;
    beginBatch(): Batch;
    rejectResult(msg: string): void;
    getWebsocketUri(port: number): string;
    private runOneCommand;
}
